//A neo4j.conf fájlban a heap memory default beállítása 1GB, érdemes ezt átállítani

//(1)Movie Constraint
CREATE CONSTRAINT UniqueMovieID FOR (m:Movie) REQUIRE m.MovieID IS UNIQUE;

//(2)Customer Constraint UniqueCustomerID ON (c:Customer) ASSERT c.CustomerID IS UNIQUE;
CREATE CONSTRAINT UniqueCustomerID FOR (c:Customer) REQUIRE c.CustomerID IS UNIQUE;

//(3) Rating index
CREATE INDEX RatedRelationship_Rating_index

FOR ()-[r:Rated]-()

ON (r.Rating);

//(4)Load Movies
LOAD CSV FROM 'file:///movie_titles_new.csv' AS row
FIELDTERMINATOR ';'
WITH toInteger(row[0]) AS MovieID,
(CASE row[1]
 WHEN 'NULL' THEN 'NULL'
 ELSE date(row[1]).year END) AS YearOfRelease,
row[2] AS Title
MERGE (m:Movie {MovieID: MovieID})
  SET m.YearOfRelease = YearOfRelease, m.Title = Title
RETURN count(m);

//(5) Load Customers
LOAD CSV FROM 'file:///combined_data_1_new_1.csv' AS row
WITH toInteger(row[1]) AS CustomerID
MERGE (c:Customer {CustomerID: CustomerID})
RETURN count(c)

//(6) Load Relationships
LOAD CSV FROM 'file:///combined_data_1_new_1.csv' AS row
WITH toInteger(row[0]) AS MovieID,
toInteger(row[1]) AS CustomerID,
toFloat(row[2]) AS Rating,
date(row[3]) AS DateOfRating
MATCH (m:Movie {MovieID: MovieID})
MERGE (c:Customer {CustomerID: CustomerID})
CREATE (c)-[r:Rated {Rating: Rating, DateOfRating: DateOfRating}]->(m)
RETURN count(c), count(r);

//(7) Pearson
MATCH (c1:Customer {CustomerID: 1488844})-[x:Rated]->(movie:Movie)
WITH c1, gds.alpha.similarity.asVector(movie, x.Rating) AS c1Vector
MATCH (c2:Customer)-[x2:Rated]->(movie:Movie) WHERE c2 <> c1
WITH c1, c2, c1Vector, gds.alpha.similarity.asVector(movie, x2.Rating) AS c2Vector
WHERE size(apoc.coll.intersection([v in c1Vector | v.category], [v in c2Vector | v.category])) > 10
RETURN c1.CustomerID AS from,
       c2.CustomerID AS to,
       gds.alpha.similarity.pearson(c1Vector, c2Vector, {vectorType: "maps"}) AS similarity
ORDER BY similarity DESC
LIMIT 100

//(8)Recommendations
MATCH (c1:Customer {CustomerID: 1488844})-[r:Rated]->(m:Movie)
WITH c1, avg(r.Rating) AS c1_mean

MATCH (c1)-[r1:Rated]->(m:Movie)<-[r2:Rated]-(c2:Customer)
WITH c1, c1_mean, c2, COLLECT({r1: r1.Rating, r2: r2.Rating}) AS ratings WHERE size(ratings) > 19

MATCH (c2)-[r:Rated]->(m:Movie)
WITH c1, c1_mean, c2, avg(r.Rating) AS c2_mean, ratings 

UNWIND ratings AS r

WITH sum( (r.r1-c1_mean) * (r.r2-c2_mean) ) AS nom,
     sqrt( sum( (r.r1 - c1_mean)^2) * sum( (r.r2 - c2_mean) ^2)) AS denom,
     c1, c2 WHERE denom <> 0

WITH c1, c2, nom/denom AS pearson
ORDER BY pearson DESC LIMIT 7200

MATCH (c2)-[r:Rated]->(m:Movie) WHERE NOT EXISTS( (c1)-[:Rated]->(m) )

RETURN m.Title, SUM( pearson * r.Rating) AS score
ORDER BY score DESC LIMIT 25